from flask import request, make_response
from flask_restx import Namespace, Resource, fields
from cloudsql_connector import connect_with_connector
import sqlalchemy
import logging

logger = logging.getLogger()


def init_connection_pool() -> sqlalchemy.engine.base.Engine:
    """Sets up connection pool for the app."""
    return connect_with_connector()


# create 'votes' table in database if it does not already exist
def migrate_db(db: sqlalchemy.engine.base.Engine) -> None:
    """Creates the `votes` table if it doesn't exist."""
    with db.connect() as conn:
        conn.execute(
            sqlalchemy.text(
                "CREATE TABLE IF NOT EXISTS t_events ("
                "event_id INTEGER GENERATED BY DEFAULT AS IDENTITY (START WITH 1 CYCLE),"
                "event_dt TIMESTAMP NOT NULL,"
                "event_type VARCHAR(50),"
                "event_name VARCHAR(100),"
                "user_id INTEGER,"
                "PRIMARY KEY (event_id));"
            )
        )
        conn.commit()


db = init_connection_pool()
migrate_db(db)

event_mgr_ns = Namespace('event_manager', 'Manage event calendar')

event_model = event_mgr_ns.model('event_model',
                                 {'event_type': fields.String(description='Calendar Event Type',
                                                              required=True,
                                                              enum=['Dates', 'Bills', 'Medicine', 'Routine', 'Other']),
                                  'event_dt': fields.DateTime(description='Event datetime',
                                                              required=True),
                                  'user_id': fields.Integer(description='User Identifier',
                                                            required=True),
                                  'event_name': fields.String(description='Event Name',
                                                              required=True),
                                  'event_id': fields.Integer(description='Event Identifier', readonly=True)
                                  })

event_list_model = event_mgr_ns.model('event_list_model',
                                      {'events': fields.Nested(event_model,
                                                               description='List of Events',
                                                               as_list=True),
                                       'total_events': fields.Integer(description='Total number of events')})


@event_mgr_ns.route('')
class Events(Resource):
    @event_mgr_ns.marshal_list_with(event_list_model)
    def get(self):
        res = get_events(db)
        return {'events': res, 'total_events': len(res)}

    @event_mgr_ns.expect(event_model)
    def post(self):
        return save_event(db,
                          event_type=request.json['event_type'],
                          event_dt=request.json['event_dt'],
                          event_name=request.json['event_name'],
                          user_id=request.json['user_id'])


@event_mgr_ns.route('/<int:event_id>')
class Event(Resource):
    @event_mgr_ns.marshal_list_with(event_model)
    def get(self, event_id):
        return get_event(db, event_id)

    @event_mgr_ns.expect(event_model)
    def put(self, event_id):
        return merge_event(db, event_id,
                           event_type=request.json['event_type'],
                           event_dt=request.json['event_dt'],
                           event_name=request.json['event_name'],
                           user_id=request.json['user_id'])

    @event_mgr_ns.response(404, 'Entity not found')
    def delete(self, event_id):
        return delete_event(db, event_id)


def save_event(app_db: sqlalchemy.engine.base.Engine, event_type: str, event_dt: str, user_id: int, event_name: str):
    stmt = sqlalchemy.text(
        "INSERT INTO t_events (event_dt, event_type, event_name, user_id)"
        "VALUES (:event_dt, :event_type, :event_name, :user_id)"
    )
    try:
        # Using a with statement ensures that the connection is always released
        # back into the pool at the end of statement (even if an error occurs)
        with app_db.connect() as conn:
            conn.execute(stmt, parameters={'event_dt': event_dt,
                                           'event_type': event_type,
                                           'event_name': event_name,
                                           'user_id': user_id})
            conn.commit()
    except Exception as e:
        # If something goes wrong, handle the error in this section. This might
        # involve retrying or adjusting parameters depending on the situation.
        # [START_EXCLUDE]
        logger.exception(e)
        return make_response("Unable to successfully cast vote! Please check the "
                             "application logs for more details.", 500)

        # [END_EXCLUDE]
    # [END cloud_sql_postgres_sqlalchemy_connection]

    return make_response(f'Event created successfully. User ID: {user_id} date: {event_dt}, '
                         f'type: {event_type}, name: {event_name}', 200)


def get_events(app_db):
    stmt = sqlalchemy.text('SELECT event_id, event_dt, event_type, event_name, user_id '
                           'FROM t_events ORDER BY event_dt DESC;')
    with app_db.connect() as conn:
        res_list = []
        events_lst = conn.execute(stmt).fetchall()
        for row in events_lst:
            if row:
                res_list.append(row._asdict())

    return res_list


def get_event(app_db, event_id):
    stmt = sqlalchemy.text('SELECT event_id, event_dt, event_type, event_name, user_id '
                           'FROM t_events WHERE event_id = :event_id;')
    with app_db.connect() as conn:
        event_rec = conn.execute(stmt, parameters={'event_id': event_id}).first()

    return event_rec._asdict() if event_rec else {}


def merge_event(app_db, event_id, event_type, event_dt, user_id, event_name):
    cnt_stmt = sqlalchemy.text('SELECT count(*) FROM t_events WHERE event_id = :event_id;')
    updt_stmt = sqlalchemy.text('UPDATE t_events SET event_dt = :event_dt, event_type = :event_type, event_name = '
                                ':event_name, user_id = :user_id '
                                'WHERE event_id = :event_id;')
    with app_db.connect() as conn:
        rec_cnt = conn.execute(cnt_stmt, parameters={'event_id': event_id}).scalar()
        if rec_cnt == 0:
            return save_event(app_db, event_type, event_dt, user_id, event_name)
        else:
            conn.execute(updt_stmt, parameters={'event_id': event_id,
                                                'event_dt': event_dt,
                                                'event_type': event_type,
                                                'event_name': event_name,
                                                'user_id': user_id})
            conn.commit()
            return make_response(f'Event {event_id} updated successfully. User ID: {user_id} date: {event_dt}, '
                                 f'type: {event_type}, name: {event_name}', 200)


def delete_event(app_db, event_id):
    del_stmt = sqlalchemy.text('DELETE FROM t_events WHERE event_id = :event_id;')
    with app_db.connect() as conn:
        conn.execute(del_stmt, parameters={'event_id': event_id})
        conn.commit()

    return make_response('Success', 204)